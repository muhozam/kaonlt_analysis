void plot_Yield(){
  
//User input number of runs
  /*if(numRuns==0){
  	cout << "\nPlease enter number of runs... ";
  	cin >> numRuns;

  	if(numRuns==0){
		cerr << "Invalid entry\n";
		exit;

  	}
  }*/


  // cout << "\n~~~~~~~PLEASE MAKE SURE READ IN FILE IS IN NUMERICAL ORDER!~~~~~~~\n";

//User selection of target
  Int_t targetType;  
  

  cout << "\nPlease select target... \n" << '\n' << left << "1-Carbon\n" << left << "2-LH2\n" << left << "3-LD2\n" << '\n';
	cout << "-> ";
  	cin >> targetType;

  if(targetType==1)
	cout << " " << '\n';

  else{
	cerr << "Invalid entry\n";
	exit(0);

  }

  //Define structure for input                                                                        
  struct input_t                                                                                      
  {                                                                                                   
    Int_t   run_num;                                                                                    
    Float_t HMS_EVENTS;
    Float_t HMS_EVENTSun;
    Float_t SHMS_EVENTS;
    Float_t SHMS_EVENTSun;
    Float_t HMS_track;                                                                                    
    Float_t HMS_trackun;
    Float_t HMS_etrack;                                                                                    
    Float_t HMS_etrackun;
    Float_t SHMS_track;                                                                                    
    Float_t SHMS_trackun;
    Float_t SHMS_hadtrack;                                                                                    
    Float_t SHMS_hadtrackun;
    Float_t SHMS_pitrack;                                                                                    
    Float_t SHMS_pitrackun;
    Float_t SHMS_Ktrack;                                                                                    
    Float_t SHMS_Ktrackun;
    Float_t SHMS_ptrack;                                                                                    
    Float_t SHMS_ptrackun;
    Float_t ACC_EDTM;
    Float_t TRIG1;
    Float_t TRIG3;
    Float_t TIME;
    Float_t BCM4B;
    Float_t PS1;
    Float_t PS3;
    Float_t comp_time;                                                                                
    Float_t comp_uncer;                                                                               
    Float_t HMS_elec;                                                                                
    Float_t HMS_elecun;                                                                               
    Float_t SHMS_elec;                                                                                
    Float_t SHMS_elecun;
    Float_t SENT_EDTM;
  };                                                                                                  
                                                                                                        
  input_t input;

 
  FILE *fp = fopen("yieldVar","r");


  if (line[0] == '#')
      {
	continue;
      }
    else
      {                                                                                             
	sscanf(&line[0],"%d %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f",
	       &input.run_num,
	       &input.HMS_EVENTS,
	       &input.HMS_EVENTSun,
	       &input.SHMS_EVENTS,
	       &input.SHMS_EVENTSun,
	       &input.HMS_track,
	       &input.HMS_trackun,
	       &input.HMS_etrack,
	       &input.HMS_etrackun,
	       &input.SHMS_track,
	       &input.SHMS_trackun,
	       &input.SHMS_hadtrack,
	       &input.SHMS_hadtrackun,
	       &input.SHMS_pitrack,
	       &input.SHMS_pitrackun,
	       &input.SHMS_Ktrack,
	       &input.SHMS_Ktrackun,
	       &input.SHMS_ptrack,
	       &input.SHMS_ptrackun,
	       &input.ACC_EDTM,
	       &input.TRIG1,
	       &input.TRIG3,
	       &input.TIME,
	       &input.BCM4B,
	       &input.PS1,
	       &input.PS3,
	       &input.comp_time,
	       &input.comp_uncer,
	       &input.HMS_elec,
	       &input.HMS_elecun,
	       &input.SHMS_elec,
	       &input.SHMS_elecun,
	       &input.SENT_EDTM);   


//User input of run numbers

  Double_t *inputRuns = input.run_num;

  /*for(Int_t i=0;i<numRuns;i++){
  	cout << "Please enter run numbers: ";
  	cin >> inputRuns[i];

  }*/

//User selection of run type
  Int_t runType;  
  /*
  cout << "\nPlease select run type... \n" << '\n' << left << "1-Good Cerenkov and Track\n" << left << "2-Good Cerenkov\n" << '\n';
  	cout << "-> ";  
	cin >> runType;

  if(runType>2){
		cerr << "Invalid entry\n";
		exit(0);

  	}
  if(runType<=0){
		cerr << "Invalid entry\n";
		exit(0);

  	}
  */

//Ascii files, see hms_cut.C/shms_cut.C
  TString filename1 = "yieldVar";
  TString filename2 = "efficiencies";
  TString filename3 = "tryieldVar";




//Read in of ascii files
  TTree *tr1 = new TTree("tr1", "tr1");
  Int_t ndata1 = tr1->ReadFile(filename1,"runNumber:counts:charge:current");
  tr1->Draw("runNumber:counts:charge:current","","goff");
 
  TTree *tr2 = new TTree("tr2", "tr2");
  Int_t ndata2 = tr2->ReadFile(filename2,"runNumber:cpuLT:trEff");
  tr2->Draw("runNumber:cpuLT:trEff","","goff");

  TTree *tr3 = new TTree("tr3", "tr3");
  Int_t ndata3 = tr3->ReadFile(filename3,"runNumber:counts:charge:current");
  tr3->Draw("runNumber:counts:charge:current","","goff");
  
  Double_t *runNumber = input.run_num;
  Double_t *counts;
  Double_t *charge;
  Double_t *current;
  Double_t *cpuLT;
  Double_t *trEff;
  Int_t goodRuns[numRuns];
  Int_t bad = 0;
  Int_t good = 0;
  Int_t tmp = 0;

//Pointers referencing column in ascii files

  TString foutname;

  	counts = input.HMS_EVENTS;
  	charge = input.BCM4B;
  	current = input.BCM4B/input.TIME;
  	cpuLT = input.comp_time;
  	trEff = input.HMS_track*input.HMS_etrack;

  	foutname = "plot_TrackYieldvsCurrent_";


//Nested loop that matches input runs with runs avaliable in ascii files
  while(tmp < numRuns){

	for(Int_t i=0;i<ndata1;i++){

		if(runNumber[i]==inputRuns[tmp] && goodRuns[tmp-1]!=i){
			cout << "\nRun number " << inputRuns[tmp] << " accepted (i)" << '\n';
			cout << i << " ~loop " << tmp << '\n';
			goodRuns[tmp]=i;
			cout << runNumber[i] << " ~ " << counts[i] << "\n";
			good++;
			break;

		}else if(i==ndata1-1){
			cout << "BAD " << i << " ~loop " << tmp << '\n';
			bad++;
			break;

		}else{
			cout << "BAD " << i << " ~loop " << tmp << '\n';
			bad++;
		}
	}

	tmp++;

  }


//Number of good and bad run number matches along with the number of while loops run 	
  if(good >= numRuns){
  	cout << '\n' << good << " good for while loop " << tmp << '\n';
  	cout << bad << " bad for while loop " << tmp << '\n';

  }else{
	cout << "\nInvalid entries found!" << '\n';
	exit(0);

  }
  
   Double_t yield[ndata1], yieldRel[ndata1], uncerEvts[ndata1], adjCurrent[ndata1];

//Calculates yield for good cherenkov with and without track cuts
   if(runType==1){  
   	for(Int_t i=0;i<numRuns;i++)
  		yield[i] = counts[goodRuns[i]]/charge[goodRuns[i]]/cpuLT[goodRuns[i]]/trEff[goodRuns[i]];

   }else{
	for(Int_t i=0;i<numRuns;i++)
  		yield[i] = counts[goodRuns[i]]/charge[goodRuns[i]]/cpuLT[goodRuns[i]];

   }
   
 
   cout << "\nPlotting Run Numbers..." << '\n';

//Calculates relative yield and uncertainties & creates array to store current values for input runs
   for(Int_t i=0;i<numRuns;i++){
	adjCurrent[i]=current[goodRuns[i]];

  	yieldRel[i] = yield[i]/yield[1];
	uncerEvts[i]= TMath::Sqrt(counts[goodRuns[i]])/yield[i];
  	//uncerEvts[i] = 0;

  	cout << runNumber[goodRuns[i]] << " ";
   }

   TString target;
   
//Graphs relative yield vs current
   
   //Error on TCanvas
   TCanvas *c1 = new TCanvas("c1","Carbon, YvC");
   //c1->SetFillColor(42);
   c1->SetGrid();
   c1->GetFrame()->SetFillColor(21);
   c1->GetFrame()->SetBorderSize(12);
   
   TGraphErrors *gr1 = new TGraphErrors(numRuns,adjCurrent,yieldRel,0,uncerEvts);
   TLine *l = new TLine(0.,1.,70.,1.);
   l->SetLineColor(kRed);
   //l->SetLineWidth(2);
   //gr1->SetLineColor(2);
   //gr1->SetLineWidth(2);
   //gr1->GetYaxis()->SetRangeUser(0,2);
   //gr1->GetYaxis()->SetRangeUser(0.8,1);
   gr1->GetXaxis()->SetRangeUser(0,70.);

   if(runType==1){

   	if(targetType == 1){
   		gr1->SetTitle("Carbon;Current [uA];Rel. Track Yield");
		target = "carbon";

   	}else if(targetType == 2){
		gr1->SetTitle("LH2;Current [uA];Rel. Track Yield");
		target = "lh2";

   	}else{
		gr1->SetTitle("LD2;Current [uA];Rel. Track Yield");
		target = "ld2";

	}

   }else{

	if(targetType == 1){
   		gr1->SetTitle("Carbon;Current [uA];Rel. Yield");
		target = "carbon";

   	}else if(target == 2){
		gr1->SetTitle("LH2;Current [uA];Rel. Yield");
		target = "lh2";

   	}else{
		gr1->SetTitle("LD2;Current [uA];Rel. Yield");
		target = "ld2";

	}
   }

   gr1->SetMarkerColor(4);
   gr1->SetMarkerStyle(20);
   gr1->Draw("AP");
   l->Draw("lsame");
   c1->Update();
   
   // values for controlling format
   const string sep = " |" ;
   const int total_width = 154;
   const string line = sep + string( total_width-1, '-' ) + '|' ;

//Creates a table with various variables listed below  
   if(runType==1){

   ofstream myfile;

   myfile.open ("LuminosityScans.txt", fstream::app);

    	myfile << line << '\n'
    	       //<< setw(12) << "-> Applied Cuts:[[CerSum>0.5, |Hms delta|<8.5, Ecal>0.7, |xptar|<0.09, |yptar|<0.055, |ytar|<3.5]] (Rich's Orginal Cuts)" << '\n'
    	       << setw(12) << "-> Applied Cuts: [Applied Cuts:[[CerSum>2.0, Ecal>0.7, Ecal<1.5, |Hms delta|<8] (Rich's Orginal Cuts)]" << '\n'
    	       << line << '\n' << sep
    	       << setw(12) << left << "RunNumber" << sep
  	       << setw(12) << left << "Current" << sep
  	       //<< setw(12) << left << "BeamTime" << sep
  	       << setw(12) << left << "Charge" << sep
  	       << setw(12) << left << "TAC" << sep
  	       << setw(12) << left << "TrackYield" << sep
  	       << setw(12) << left << "RelTrackYield" << sep
  	       << setw(12) << left << "CPULT" << sep 
  	       << setw(12) << left << "TrackEff" << sep
 	       << setw(12) << left << "Uncertainty" << sep << '\n' << line << '\n';
  
   for(Int_t i=0;i<numRuns;i++){
  	myfile << sep << setw(12) << runNumber[goodRuns[i]] << sep
  	       << setw(12) << current[goodRuns[i]] << sep
  	       //<< setw(12) << bTime[goodRuns[i]] << sep
  	       << setw(12) << charge[goodRuns[i]] << sep
  	       << setw(12) << counts[goodRuns[i]] << sep
  	       << setw(12) << yield[goodRuns[i]]/1000 << sep
  	       << setw(12) << yieldRel[goodRuns[i]] << sep
  	       << setw(12) << cpuLT[goodRuns[i]] << sep
  	       << setw(12) << trEff[goodRuns[i]] << sep
 	       << setw(12) << uncerEvts[goodRuns[i]] << sep << '\n';
   }

   myfile.close();

   }else{

   ofstream myfile;

   myfile.open ("LuminosityScans.txt", fstream::app);

    	myfile << line << '\n'
    	       //<< setw(12) << "-> Applied Cuts:[[CerSum>0.5, |Hms delta|<8.5, Ecal>0.7, |xptar|<0.09, |yptar|<0.055, |ytar|<3.5]] (Rich's Orginal Cuts)" << '\n'
    	       << setw(12) << "-> Applied Cuts: [Applied Cuts:[[CerSum>2.0, Ecal>0.7, Ecal<1.5] (Rich's Orginal Cuts)]" << '\n'
    	       << line << '\n' << sep
    	       << setw(12) << left << "RunNumber" << sep
  	       << setw(12) << left << "Current" << sep
  	       << setw(12) << left << "Charge" << sep
  	       << setw(12) << left << "TAC" << sep
  	       << setw(12) << left << "Yield" << sep
  	       << setw(12) << left << "RelYield" << sep
  	       << setw(12) << left << "CPULT" << sep 
  	       << setw(12) << left << "TrackEff" << sep
 	       << setw(12) << left << "Uncertainty" << sep << '\n' << line << '\n';
  
   for(Int_t i=0;i<numRuns;i++){
  	myfile << sep << setw(12) << runNumber[goodRuns[i]] << sep
  	       << setw(12) << current[goodRuns[i]] << sep
  	       << setw(12) << charge[goodRuns[i]] << sep
  	       << setw(12) << counts[goodRuns[i]] << sep
  	       << setw(12) << yield[goodRuns[i]]/1000 << sep
  	       << setw(12) << yieldRel[goodRuns[i]] << sep
  	       << setw(12) << cpuLT[goodRuns[i]] << sep 
  	       << setw(12) << trEff[goodRuns[i]] << sep
 	       << setw(12) << uncerEvts[goodRuns[i]] << sep << '\n';
   }

   myfile.close();

   }

//Prints an image file of the plot
   c1->Print("OUTPUT/" + foutname + target + Form("_%i",(Int_t)inputRuns[0]) + Form("-%i",(Int_t)inputRuns[numRuns-1]) + ".png");

   return;

}
